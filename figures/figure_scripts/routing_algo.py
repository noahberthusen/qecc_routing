import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from scipy.optimize import curve_fit
import os

full_path = os.path.realpath(__file__)
path, filename = os.path.split(full_path)

plt.rc('font', family='serif')
# plt.rcParams['xtick.direction'] = 'in'
# plt.rcParams['ytick.direction'] = 'in'
plt.rcParams['axes.linewidth'] = 1

fig, ax = plt.subplots(1, 1, figsize=(4.5,2.5), sharey=True)

res1 = np.array([ # do generators with fewer qubits first
    [3, 6, 4.529947916666666, 10.71875],
    [3, 7, 3.785714285714286, 9.666666666666666],
    [6, 6, 5.554999999999999, 14.04],
    [3, 12, 6.398474178403756, 15.43661971830986],
    [5, 6, 5.083333333333333, 12.5],
    [5, 9, 5.888888888888888, 14.857142857142858],
    [5, 12, 7.125, 18.333333333333332],
    [6, 9, 6.404483430799221, 16.105263157894736],
    [6, 18, 9.364646464646464, 25.78181818181818],
    [3, 15, 7.5406249999999995, 18.416666666666668],
    [7, 14, 8.597802197802197, 23.43076923076923],
    [5, 15, 8.55238095238095, 22.523809523809526],
    [6, 15, 10.13222222222222, 25.916666666666668],
    [6, 12, 7.409863945578232, 19.632653061224488],
    [6, 30, 12.953260869565218, 33.95652173913044],
    [5, 30, 11.928333333333336, 30.35],
    # [12, 24, 13.442401960784315, 41.27450980392157], # bad
    [18, 21, 17.77698412698413, 50.47692307692308],
    # [9, 27, 12.984070091596978, 38.72043010752688]
    # [7, 21, 10.59080459770115, 29.47586206896552]
    [5, 45, 17.191039426523297, 42.193548387096776],
    [5, 60, 22.1755376344086, 57.03225806451613],
    [15, 21, 17.647902494331067, 48.17857142857143],
    # [15, 15, 11.38846153846154, 34.92857142857143],
    [7, 45, 13.478306878306878, 35.666666666666664],
    [9, 9, 7.098673300165837, 19.328358208955223],
    [9, 30, 15.101243781094526, 42.40298507462686],
    [6, 28, 11.357142857142858, 26.0],
    # [12, 25, 10.475, 34.666666666666664],
    # [9, 45, 18.02790404040404, 53.10227272727273]
])

def fun(x, c):
    return c*x

ind = 8
popt, pcov = curve_fit(fun, res1[:ind][:,2], res1[:ind][:,3])
print(popt, np.sqrt(pcov))

res2 = np.array([ # randomly shuffle generators
    [3, 6, 4.501243781094527, 10.432835820895523],
    [3, 7, 3.9285714285714284, 10.0],
    [6, 6, 5.617886178861788, 14.146341463414634],
    [3, 9, 5.276119402985074, 12.492537313432836],
    [6, 12, 7.329475308641975, 19.01851851851852],
    [6, 9, 7.258607198748045, 17.845070422535212],
    [7, 14, 8.604437229437229, 23.272727272727273],
    [5, 12, 7.291666666666667, 18.5],
    [3, 12, 6.641071428571428, 15.785714285714286],
    [6, 18, 9.203453453453452, 24.56756756756757],
    [6, 28, 7.1875, 20.0],
    [6, 28, 11.357142857142858, 26.0],
    [6, 24, 11.736519607843137, 32.26470588235294],
    [6, 30, 13.244326241134752, 34.87234042553192],
    [12, 12, 9.588541666666666, 27.604166666666668],
    # [18, 21, 19.140835579514825, 54.84905660377358],
    [5, 15, 8.205128205128204, 20.807692307692307],
    [5, 45, 17.537606837606837, 44.73076923076923],
    [21, 15, 19.544540644540643, 51.72727272727273],
    # [9, 25, 11.195555555555554, 33.8], # bad one
    [9, 21, 13.730406746031747, 36.84375],
    # [7, 28, 13.146666666666667, 35.82666666666667]
])
res = res1
code_sizes = [r[0]*r[1]*2 for r in res]

red = [(181/255, 29/255, 20/255)]

for i in range(len(res)):
    plt.plot([code_sizes[i], code_sizes[i]], [res[i][3], 2.5*res[i][2]], 'k-', zorder=0)
plt.scatter(code_sizes, res[:,3], c=red, marker='o', s=30, label="Algorithm")
plt.scatter(code_sizes, 2.5*res[:,2], c='k', marker='x', label="$2.5\cdot$"+"Theory bound")

plt.xscale('log')
plt.legend(loc="upper left")
plt.xlabel("Code size")
plt.ylabel("Routing rounds")


plt.savefig(os.path.join(path, f'../algo_results.png'), dpi=1000, transparent=False, bbox_inches='tight')
